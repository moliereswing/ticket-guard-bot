import time
import logging
import sqlite3
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import asyncio

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'  # ‚ö†Ô∏è –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
THEATER_URL = 'https://quicktickets.ru/orel-teatr-svobodnoe-prostranstvo'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# === –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ===
def init_db():
    conn = sqlite3.connect('subscribers.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS subscribers (
            chat_id INTEGER PRIMARY KEY,
            username TEXT
        )
    ''')
    conn.commit()
    conn.close()

def add_subscriber(chat_id, username):
    conn = sqlite3.connect('subscribers.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR REPLACE INTO subscribers (chat_id, username) VALUES (?, ?)', (chat_id, username))
    conn.commit()
    conn.close()
    logger.info(f"–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {username} ({chat_id})")

def get_all_subscribers():
    conn = sqlite3.connect('subscribers.db')
    cursor = conn.cursor()
    cursor.execute('SELECT chat_id FROM subscribers')
    subscribers = [row[0] for row in cursor.fetchall()]
    conn.close()
    return subscribers

# === –ö–æ–º–∞–Ω–¥—ã Telegram-–±–æ—Ç–∞ ===
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    username = update.effective_user.username or "–ê–Ω–æ–Ω–∏–º"
    add_subscriber(chat_id, username)
    await update.message.reply_text(
        "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!\n"
        "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –±–∏–ª–µ—Ç—ã –Ω–∞ –ª—é–±–æ–π —Å–ø–µ–∫—Ç–∞–∫–ª—å ‚Äî —è —Å—Ä–∞–∑—É —Å–æ–æ–±—â—É. üé≠\n"
        "–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /stop."
    )

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    conn = sqlite3.connect('subscribers.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM subscribers WHERE chat_id = ?', (chat_id,))
    conn.commit()
    conn.close()
    await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º ===
async def broadcast_message(application, text):
    subscribers = get_all_subscribers()
    for chat_id in subscribers:
        try:
            await application.bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {chat_id}: {e}")
            if "Forbidden" in str(e):
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                conn = sqlite3.connect('subscribers.db')
                cursor = conn.cursor()
                cursor.execute('DELETE FROM subscribers WHERE chat_id = ?', (chat_id,))
                conn.commit()
                conn.close()

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–ª–µ—Ç–æ–≤ ===
async def check_new_events(application):
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")

    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)

    try:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∏–ª–µ—Ç–æ–≤...")
        driver.get(THEATER_URL)
        time.sleep(5)  # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        # üîç –ò—â–µ–º –í–°–ï –æ—Ä–∞–Ω–∂–µ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ (–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–∞–Ω—Å—ã)
        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ–¥–æ–±—Ä–∞–Ω—ã –ø–æ–¥ quicktickets.ru
        event_blocks = driver.find_elements(By.CSS_SELECTOR, "div.event")

        new_events_found = False

        for block in event_blocks:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Ä–∞–Ω–∂–µ–≤—É—é –∫–Ω–æ–ø–∫—É –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
                date_link = block.find_element(By.CSS_SELECTOR, "a.btn-orange, a.btn-primary")
                event_time = date_link.text.strip()

                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ–∫—Ç–∞–∫–ª—è
                try:
                    title_element = block.find_element(By.CSS_SELECTOR, "h3, .event-title, strong")
                    event_title = title_element.text.strip()
                except:
                    event_title = "–°–ø–µ–∫—Ç–∞–∫–ª—å"

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = f"üéâ <b>–ü–æ—è–≤–∏–ª–∏—Å—å –±–∏–ª–µ—Ç—ã!</b>\n\nüé≠ {event_title}\n‚è∞ {event_time}\nüîó {THEATER_URL}"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï–ú –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                await broadcast_message(application, message)
                new_events_found = True
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Å–µ–∞–Ω—Å: {event_title} –≤ {event_time}")

            except Exception:
                # –ï—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ –Ω–µ—Ç –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∫–Ω–æ–ø–∫–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ (–±–∏–ª–µ—Ç–æ–≤ –Ω–µ—Ç)
                continue

        if not new_events_found:
            logger.info("–ù–æ–≤—ã—Ö —Å–µ–∞–Ω—Å–æ–≤ —Å –±–∏–ª–µ—Ç–∞–º–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
    finally:
        driver.quit()

# === –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ===
async def monitoring_loop(application):
    while True:
        try:
            await check_new_events(application)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
        logger.info("–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç...")
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    init_db()
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("stop", stop_command))

    await application.initialize()
    await application.start()
    await application.updater.start_polling()

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥...")
    await monitoring_loop(application)

if __name__ == "__main__":
    asyncio.run(main())
