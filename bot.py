import time
import logging
import sqlite3
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import asyncio

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = '8286251093:AAHmfYAWQFZksTFvmKY29wG_xMTCapFmau0'
THEATER_URL = 'https://quicktickets.ru/orel-teatr-svobodnoe-prostranstvo'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# === –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ===
def init_db():
    conn = sqlite3.connect('subscribers.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS subscribers (
            chat_id INTEGER PRIMARY KEY,
            username TEXT
        )
    ''')
    conn.commit()
    conn.close()

def add_subscriber(chat_id, username):
    conn = sqlite3.connect('subscribers.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR REPLACE INTO subscribers (chat_id, username) VALUES (?, ?)', (chat_id, username))
    conn.commit()
    conn.close()
    logger.info(f"–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {username} ({chat_id})")

def get_all_subscribers():
    conn = sqlite3.connect('subscribers.db')
    cursor = conn.cursor()
    cursor.execute('SELECT chat_id FROM subscribers')
    subscribers = [row[0] for row in cursor.fetchall()]
    conn.close()
    return subscribers

# === –ö–æ–º–∞–Ω–¥—ã Telegram-–±–æ—Ç–∞ ===
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    username = update.effective_user.username or "–ê–Ω–æ–Ω–∏–º"
    add_subscriber(chat_id, username)
    await update.message.reply_text(
        "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!\n"
        "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –±–∏–ª–µ—Ç—ã ‚Äî –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ —Å–µ–∫—É–Ω–¥—ã. üö®\n"
        "–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /stop."
    )

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    conn = sqlite3.connect('subscribers.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM subscribers WHERE chat_id = ?', (chat_id,))
    conn.commit()
    conn.close()
    await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º ===
async def broadcast_message(application, text):
    subscribers = get_all_subscribers()
    for chat_id in subscribers:
        try:
            await application.bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML', disable_web_page_preview=False)
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {chat_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {chat_id}: {e}")
            if "Forbidden" in str(e):
                # –£–¥–∞–ª—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞
                conn = sqlite3.connect('subscribers.db')
                cursor = conn.cursor()
                cursor.execute('DELETE FROM subscribers WHERE chat_id = ?', (chat_id,))
                conn.commit()
                conn.close()

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–ª–µ—Ç–æ–≤ ===
async def check_new_events(application):
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-images")  # –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    chrome_options.add_argument("--blink-settings=imagesEnabled=false")

    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)

    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–ª–µ—Ç–æ–≤...")
        driver.get(THEATER_URL)
        time.sleep(3)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–æ–≥—Ä—É–∑–∫–∏

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –±–ª–æ–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        event_blocks = driver.find_elements(By.CSS_SELECTOR, "div.event")

        for block in event_blocks:
            try:
                # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ–∫—Ç–∞–∫–ª—è (–ø–µ—Ä–≤—ã–π span.underline)
                title_spans = block.find_elements(By.CSS_SELECTOR, "span.underline")
                if len(title_spans) < 2:
                    continue

                event_title = title_spans[0].text.strip()  # –ü–µ—Ä–≤—ã–π ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ
                event_time = title_spans[1].text.strip()   # –í—Ç–æ—Ä–æ–π ‚Äî –¥–∞—Ç–∞/–≤—Ä–µ–º—è

                # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ–∞–Ω—Å (–æ–±—ë—Ä–Ω—É—Ç–∞ –≤–æ–∫—Ä—É–≥ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏)
                try:
                    date_link = title_spans[1].find_element(By.XPATH, "./ancestor::a")
                    event_url = date_link.get_attribute('href')
                except:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ "(–º–µ—Å—Ç –Ω–µ—Ç)"
                no_seats_elements = block.find_elements(By.CSS_SELECTOR, "span[style*='color:#888888']")

                # ‚úÖ –ï—Å–ª–∏ "(–º–µ—Å—Ç –Ω–µ—Ç)" –ù–ï–¢ ‚Äî –∑–Ω–∞—á–∏—Ç, –±–∏–ª–µ—Ç—ã –µ—Å—Ç—å!
                if not no_seats_elements:
                    message = (
                        f"üö® <b>–°–†–û–ß–ù–û! –ë–ò–õ–ï–¢–´ –ü–û–Ø–í–ò–õ–ò–°–¨!</b>\n\n"
                        f"üé≠ <b>{event_title}</b>\n"
                        f"‚è∞ {event_time}\n"
                        f"üîó <a href='{event_url}'>–ë–´–°–¢–†–û –í–´–ë–†–ê–¢–¨!</a>"
                    )
                    await broadcast_message(application, message)
                    logger.info(f"üéâ –ë–∏–ª–µ—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: {event_title} ‚Äî {event_time}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∞: {e}")
                continue

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
    finally:
        driver.quit()

# === –°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ===
async def monitoring_loop(application):
    while True:
        start_time = time.time()
        try:
            await check_new_events(application)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
        elapsed = time.time() - start_time
        sleep_time = max(10 - elapsed, 1)  # –ú–∏–Ω–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞, –º–∞–∫—Å–∏–º—É–º 10
        logger.info(f"‚è±Ô∏è –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {int(sleep_time)} —Å–µ–∫...")
        await asyncio.sleep(sleep_time)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    init_db()
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("stop", stop_command))

    await application.initialize()
    await application.start()
    await application.updater.start_polling()

    logger.info("üî• –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥!")
    await monitoring_loop(application)
    
if __name__ == "__main__":
    asyncio.run(main())


