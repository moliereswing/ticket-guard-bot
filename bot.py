import asyncio
import time
import requests
from bs4 import BeautifulSoup
from telegram import Bot
from telegram.error import TelegramError
import os
from threading import Thread
from http.server import HTTPServer, BaseHTTPRequestHandler

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '8286251093:AAHmfYAWQFZksTFvmKY29wG_xMTCapFmau0')
CHAT_ID = os.getenv('CHAT_ID', '8286251093')

MAIN_URL = 'https://quicktickets.ru/orel-teatr-svobodnoe-prostranstvo'
HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0 Safari/537.36'
}

notified_events = set()

async def send_alert(bot, event_name, booking_url):
    message = (
        f"üé´ *–ü–û–Ø–í–ò–õ–ò–°–¨ –ë–ò–õ–ï–¢–´!* \n\n"
        f"üé≠ *–°–ø–µ–∫—Ç–∞–∫–ª—å:* {event_name}\n"
        f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—Ç]({booking_url})\n\n"
        f"‚è≥ –ë—Ä–æ–Ω–∏—Ä—É–π —Å–∫–æ—Ä–µ–µ ‚Äî –∞–∂–∏–æ—Ç–∞–∂ –±–æ–ª—å—à–æ–π!"
    )
    try:
        await bot.send_message(
            chat_id=CHAT_ID,
            text=message,
            parse_mode='Markdown',
            disable_web_page_preview=False
        )
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {event_name}")
    except TelegramError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

def check_events():
    try:
        options = webdriver.ChromeOptions()
        options.add_argument('--headless')  # —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ–∫–Ω–∞
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')

        driver = webdriver.Chrome(options=options)
        driver.get(MAIN_URL)

        # –ò—â–µ–º –≤—Å–µ —Å–ø–µ–∫—Ç–∞–∫–ª–∏
        events = driver.find_elements(By.CSS_SELECTOR, '.event-item')

        for event in events:
            title_elem = event.find_element(By.CSS_SELECTOR, '.event-title, h3, .title a')
            title = title_elem.text.strip()

            link_elem = event.find_element(By.TAG_NAME, 'a')
            event_url = link_elem.get_attribute('href')

            if not event_url.startswith('http'):
                event_url = 'https://quicktickets.ru' + event_url

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            driver.get(event_url)

            # –ñ–¥—ë–º, –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –ø–ª–∞–Ω –∑–∞–ª–∞
            try:
                wait = WebDriverWait(driver, 10)
                seat_map = wait.until(EC.presence_of_element_located((By.CLASS_NAME, 'seat-map')))
            except:
                continue

            # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –∫–ª–∞—Å—Å–æ–º "available")
            available_seat = driver.find_element(By.CSS_SELECTOR, '.seat.available')
            if not available_seat:
                continue

            # –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
            available_seat.click()

            # –ñ–¥—ë–º, –ø–æ–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "–ö—É–ø–∏—Ç—å"
            try:
                buy_button = wait.until(EC.presence_of_element_located((By.XPATH, '//button[contains(text(), "–ö—É–ø–∏—Ç—å")]')))
                booking_url = buy_button.get_attribute('href') or event_url
                if not booking_url.startswith('http'):
                    booking_url = 'https://quicktickets.ru' + booking_url

                event_id = f"{title}|{booking_url}"
                if event_id not in notified_events:
                    return title, booking_url
            except:
                continue

        driver.quit()
        return None, None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return None, None
        
async def main_bot():
    bot = Bot(token=TELEGRAM_TOKEN)
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await bot.send_message(chat_id=CHAT_ID, text="‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –±–∏–ª–µ—Ç—ã!")
        print("üì© –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –±–∏–ª–µ—Ç—ã...")
    while True:
        title, booking_url = check_events()
        if title and booking_url:
            await send_alert(bot, title, booking_url)
            notified_events.add(f"{title}|{booking_url}")

        print("üí§ –°–ø–ª—é 30 —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(30)

# üåê –§–∏–∫—Ç–∏–≤–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ "No open ports")
class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_health_server():
    port = int(os.environ.get('PORT', 10000))
    server = HTTPServer(('0.0.0.0', port), HealthCheckHandler)
    print(f"üåê Health server running on port {port}")
    server.serve_forever()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=run_health_server, daemon=True).start()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
    asyncio.run(main_bot())


