import asyncio
import time
import os
from threading import Thread
from http.server import HTTPServer, BaseHTTPRequestHandler
from telegram import Bot
from telegram.ext import Application, CommandHandler
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '8286251093:AAHmfYAWQFZksTFvmKY29wG_xMTCapFmau0')
SUBSCRIBERS_FILE = 'subscribers.txt'

# –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists(SUBSCRIBERS_FILE):
    open(SUBSCRIBERS_FILE, 'w').close()

notified_events = set()

async def send_alert_to_all(bot, event_name, booking_url):
    message = (
        f"üé´ *–ü–û–Ø–í–ò–õ–ò–°–¨ –ë–ò–õ–ï–¢–´!* \n\n"
        f"üé≠ *–°–ø–µ–∫—Ç–∞–∫–ª—å:* {event_name}\n"
        f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—Ç]({booking_url})\n\n"
        f"‚è≥ –ë—Ä–æ–Ω–∏—Ä—É–π —Å–∫–æ—Ä–µ–µ ‚Äî –∞–∂–∏–æ—Ç–∞–∂ –±–æ–ª—å—à–æ–π!"
    )

    # –ß–∏—Ç–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    with open(SUBSCRIBERS_FILE, 'r', encoding='utf-8') as f:
        chat_ids = set(line.strip() for line in f if line.strip())

    for chat_id in chat_ids:
        try:
            await bot.send_message(
                chat_id=int(chat_id),
                text=message,
                parse_mode='Markdown',
                disable_web_page_preview=False
            )
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {event_name} ‚Üí {chat_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {chat_id}: {e}")

async def start(update, context):
    chat_id = str(update.message.chat_id)
    user_name = update.message.from_user.first_name

    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    with open(SUBSCRIBERS_FILE, 'r', encoding='utf-8') as f:
        subscribers = set(line.strip() for line in f)

    if chat_id not in subscribers:
        subscribers.add(chat_id)
        with open(SUBSCRIBERS_FILE, 'w', encoding='utf-8') as f:
            f.write('\n'.join(subscribers))
        await update.message.reply_text("‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω(–∞) –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∏–ª–µ—Ç–∞—Ö!")
        print(f"üì© –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_name} ({chat_id})")
    else:
        await update.message.reply_text("–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω(–∞) –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

def check_events():
    try:
        options = webdriver.ChromeOptions()
        options.add_argument('--headless')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')

        driver = webdriver.Chrome(options=options)
        MAIN_URL = 'https://quicktickets.ru/orel-teatr-svobodnoe-prostranstvo'
        driver.get(MAIN_URL)

        events = driver.find_elements(By.CSS_SELECTOR, '.event-item')

        for event in events:
            try:
                title_elem = event.find_element(By.CSS_SELECTOR, '.event-title, h3, .title a')
                title = title_elem.text.strip()

                link_elem = event.find_element(By.TAG_NAME, 'a')
                event_url = link_elem.get_attribute('href')
                if not event_url.startswith('http'):
                    event_url = 'https://quicktickets.ru' + event_url

                driver.get(event_url)

                wait = WebDriverWait(driver, 10)
                seat_map = wait.until(EC.presence_of_element_located((By.CLASS_NAME, 'seat-map')))

                available_seat = driver.find_element(By.CSS_SELECTOR, '.seat.available')
                available_seat.click()

                buy_button = wait.until(EC.presence_of_element_located((By.XPATH, '//button[contains(text(), "–ö—É–ø–∏—Ç—å")]')))
                booking_url = buy_button.get_attribute('href') or event_url
                if not booking_url.startswith('http'):
                    booking_url = 'https://quicktickets.ru' + booking_url

                event_id = f"{title}|{booking_url}"
                if event_id not in notified_events:
                    driver.quit()
                    return title, booking_url

            except Exception as e:
                continue

        driver.quit()
        return None, None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return None, None

async def main_bot():
    bot = Bot(token=TELEGRAM_TOKEN)
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –±–∏–ª–µ—Ç—ã...")

    while True:
        title, booking_url = check_events()
        if title and booking_url:
            await send_alert_to_all(bot, title, booking_url)
            notified_events.add(f"{title}|{booking_url}")

        print("üí§ –°–ø–ª—é 30 —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(30)

# üåê –§–∏–∫—Ç–∏–≤–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_health_server():
    port = int(os.environ.get('PORT', 10000))
    server = HTTPServer(('0.0.0.0', port), HealthCheckHandler)
    print(f"üåê Health server running on port {port}")
    server.serve_forever()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏—ë–º–∞ –∫–æ–º–∞–Ω–¥
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
    Thread(target=run_health_server, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
    asyncio.get_event_loop().run_until_complete(asyncio.gather(
        app.run_polling(),
        main_bot()
    ))
