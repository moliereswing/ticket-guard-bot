import time
import os
from threading import Thread
from http.server import HTTPServer, BaseHTTPRequestHandler
from telegram.ext import Updater, CommandHandler
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '8286251093:AAHmfYAWQFZksTFvmKY29wG_xMTCapFmau0')
SUBSCRIBERS_FILE = 'subscribers.txt'

# –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists(SUBSCRIBERS_FILE):
    open(SUBSCRIBERS_FILE, 'w').close()

notified_events = set()

def send_alert_to_all(bot, event_name, booking_url):
    message = (
        f"üé´ *–ü–û–Ø–í–ò–õ–ò–°–¨ –ë–ò–õ–ï–¢–´!* \n\n"
        f"üé≠ *–°–ø–µ–∫—Ç–∞–∫–ª—å:* {event_name}\n"
        f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—Ç]({booking_url})\n\n"
        f"‚è≥ –ë—Ä–æ–Ω–∏—Ä—É–π —Å–∫–æ—Ä–µ–µ ‚Äî –∞–∂–∏–æ—Ç–∞–∂ –±–æ–ª—å—à–æ–π!"
    )

    # –ß–∏—Ç–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    with open(SUBSCRIBERS_FILE, 'r', encoding='utf-8') as f:
        chat_ids = set(line.strip() for line in f if line.strip())

    for chat_id in chat_ids:
        try:
            bot.send_message(
                chat_id=int(chat_id),
                text=message,
                parse_mode='Markdown',
                disable_web_page_preview=False
            )
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {event_name} ‚Üí {chat_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {chat_id}: {e}")

def start(update, context):
    chat_id = str(update.message.chat_id)
    user_name = update.message.from_user.first_name

    with open(SUBSCRIBERS_FILE, 'r', encoding='utf-8') as f:
        subscribers = set(line.strip() for line in f)

    if chat_id not in subscribers:
        subscribers.add(chat_id)
        with open(SUBSCRIBERS_FILE, 'w', encoding='utf-8') as f:
            f.write('\n'.join(subscribers))
        update.message.reply_text("‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω(–∞) –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∏–ª–µ—Ç–∞—Ö!")
        print(f"üì© –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_name} ({chat_id})")
    else:
        update.message.reply_text("–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω(–∞) –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

def check_events():
    try:
        options = webdriver.ChromeOptions()
        options.add_argument('--headless')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--disable-gpu')
        options.add_argument('--remote-debugging-port=9222')

        # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Service
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)
        MAIN_URL = 'https://quicktickets.ru/orel-teatr-svobodnoe-prostranstvo'
        driver.get(MAIN_URL)

        events = driver.find_elements(By.CSS_SELECTOR, '.event-item')

        for event in events:
            try:
                title_elem = event.find_element(By.CSS_SELECTOR, '.event-title, h3, .title a')
                title = title_elem.text.strip()

                link_elem = event.find_element(By.TAG_NAME, 'a')
                event_url = link_elem.get_attribute('href')
                if not event_url.startswith('http'):
                    event_url = 'https://quicktickets.ru' + event_url

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                driver.get(event_url)

                # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—Ç
                wait = WebDriverWait(driver, 10)
                date_items = wait.until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '.date')))

                for date_item in date_items:
                    try:
                        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
                        date_text_elem = date_item.find_element(By.CSS_SELECTOR, '.date__text')
                        date_text = date_text_elem.text.strip()

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ ‚Äî –µ—Å–ª–∏ –Ω–µ —Å–µ—Ä—ã–π, –∑–Ω–∞—á–∏—Ç –±–∏–ª–µ—Ç—ã –µ—Å—Ç—å
                        # –°–µ—Ä—ã–π —Ç–µ–∫—Å—Ç: color: #888 –∏–ª–∏ opacity: 0.5 ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∞–π—Ç–∞
                        style = date_text_elem.get_attribute('style') or ''
                        computed_color = driver.execute_script(
                            "return window.getComputedStyle(arguments[0]).color;", date_text_elem
                        )

                        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–µ—Ä—ã–π ‚Äî –±–∏–ª–µ—Ç—ã –µ—Å—Ç—å
                        if 'rgb(136, 136, 136)' not in computed_color and 'opacity: 0.5' not in style:
                            print(f"üéâ –ù–∞–π–¥–µ–Ω—ã –±–∏–ª–µ—Ç—ã: {title} ‚Äî {date_text}")

                            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                            booking_link = date_item.find_element(By.TAG_NAME, 'a')
                            booking_url = booking_link.get_attribute('href')
                            if not booking_url.startswith('http'):
                                booking_url = 'https://quicktickets.ru' + booking_url

                            event_id = f"{title}|{booking_url}"
                            if event_id not in notified_events:
                                driver.quit()
                                return title, booking_url

                    except Exception as e:
                        continue

            except Exception as e:
                continue

        driver.quit()
        return None, None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return None, None

def monitor_tickets(updater):
    bot = updater.bot
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –±–∏–ª–µ—Ç—ã...")

    while True:
        title, booking_url = check_events()
        if title and booking_url:
            send_alert_to_all(bot, title, booking_url)
            notified_events.add(f"{title}|{booking_url}")

        print("üí§ –°–ø–ª—é 30 —Å–µ–∫—É–Ω–¥...")
        time.sleep(30)

# üåê –§–∏–∫—Ç–∏–≤–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ "No open ports")
class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_health_server():
    port = int(os.environ.get('PORT', 10000))
    server = HTTPServer(('0.0.0.0', port), HealthCheckHandler)
    print(f"üåê Health server running on port {port}")
    server.serve_forever()

if __name__ == '__main__':
    # –°–æ–∑–¥–∞—ë–º Telegram-–±–æ—Ç–∞
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=run_health_server, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∏–ª–µ—Ç–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=monitor_tickets, args=(updater,), daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞
    print("ü§ñ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—É –∫–æ–º–∞–Ω–¥—ã /start...")
    updater.start_polling()
    updater.idle()
